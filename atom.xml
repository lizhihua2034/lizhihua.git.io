<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="https://zhihuali.cn/atom.xml" rel="self"/>
  
  <link href="https://zhihuali.cn/"/>
  <updated>2020-08-24T15:51:46.293Z</updated>
  <id>https://zhihuali.cn/</id>
  
  <author>
    <name>Zhihua Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Filter</title>
    <link href="https://zhihuali.cn/2020/08/24/Filter/"/>
    <id>https://zhihuali.cn/2020/08/24/Filter/</id>
    <published>2020-08-24T15:21:00.000Z</published>
    <updated>2020-08-24T15:51:46.293Z</updated>
    
    <content type="html"><![CDATA[<p>1、Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证</li><li>….<a id="more"></a>2、过滤器在Web应用中的作用</li></ul><p><img src="/images/pasted-59.png" alt="upload successful"></p><p>3、Filter开发步骤：</p><p>1、导包（注意事项javax.servlet包下的Filter接口）</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><p>2、实现Filter接口并重写接口方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="comment">//    初始化:web服务器启动就已经初始化了 随时等待过滤对象的出现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    chain：链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2.必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">    chain.doFilter(request,response)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);   <span class="comment">//让请求继续走 如果不写 程序到这里就会被拦截停止</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    销毁:web服务器关闭的时候 过滤会销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>3、在web.xml中配置相关Filter</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>indi.zhihuali.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Filter：过滤器 ，用来过滤网站的数据；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理中文乱码&lt;/li&gt;
&lt;li&gt;登录验证&lt;/li&gt;
&lt;li&gt;….</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="https://zhihuali.cn/2020/08/24/JSP%E9%87%8D%E7%82%B9/"/>
    <id>https://zhihuali.cn/2020/08/24/JSP%E9%87%8D%E7%82%B9/</id>
    <published>2020-08-24T11:34:00.000Z</published>
    <updated>2020-08-24T12:53:46.299Z</updated>
    
    <content type="html"><![CDATA[<p>1、JSP（JavaServerPages）</p><p>2、任何语言都有自己的语法， JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p><a id="more"></a><p>3、JSP九大内置对象</p><ul><li>PageContext 存东西</li><li>Request 存东西</li><li>Response</li><li>Session 存东西</li><li>Application 【SerlvetContext】 存东西</li><li>config 【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">       <span class="comment">//内置对象</span></span><br><span class="line">       pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;1&quot;</span>);     <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">       request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;2&quot;</span>);     <span class="comment">//保存的数据只在一次请求中有效 请求转发会携带这个数据</span></span><br><span class="line">       session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;3&quot;</span>);     <span class="comment">//保存的数据只在一次会话中有效 从打开浏览器到关闭浏览器的一个过程</span></span><br><span class="line">       application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;4&quot;</span>); <span class="comment">//保存的数据只在服务器中有效 从打开服务器到关闭服务器的一个过程</span></span><br><span class="line">   %&gt;</span><br></pre></td></tr></table></div></figure><p> 在findAttribute()时 会根据从底层到高层的顺序：</p><p> 即：page-&gt;request-&gt;session-&gt;application </p><p> 依次寻找变量</p> <figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">        <span class="comment">//内置对象</span></span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;1&quot;</span>);     <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;2&quot;</span>);     <span class="comment">//保存的数据只在一次请求中有效 请求转发会携带这个数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;3&quot;</span>);     <span class="comment">//保存的数据只在一次会话中有效 从打开浏览器到关闭浏览器的一个过程</span></span><br><span class="line">        application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;4&quot;</span>); <span class="comment">//保存的数据只在服务器中有效 从打开服务器到关闭服务器的一个过程</span></span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--脚本片段中的代码 会原封不动的生成到xxx.jsp.java.java</span><br><span class="line">    要求：这里面的代码 必须要保证Java语法的正确性   --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">//    从pageContext取出 我们通过寻找的方式来</span></span><br><span class="line"><span class="comment">//    从底层到高层（作用域）</span></span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line">    String name5 = (String) pageContext.findAttribute(<span class="string">&quot;name5&quot;</span>); <span class="comment">//不存在</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用EL表达式来输出$&#123;&#125;--%&gt;</span><br><span class="line">    &lt;h1&gt;取出的值为：&lt;/h1&gt;</span><br><span class="line">    &lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&lt;%=name5%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure><p>页面输出：<br><img src="/images/pasted-54.png" alt="upload successful"></p><p>在另一个页面中试图访问时</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">//    从pageContext取出 我们通过寻找的方式来</span></span><br><span class="line"><span class="comment">//    从底层到高层（作用域）</span></span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line">    String name5 = (String) pageContext.findAttribute(<span class="string">&quot;name5&quot;</span>); <span class="comment">//不存在</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式来输出$&#123;&#125;--%&gt;</span><br><span class="line">&lt;h1&gt;取出的值为：&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;&lt;%=name5%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure><p>结果显示为：</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>说明寻找变量时确实由作用域小到作用域大去做的</p><p>3、有关前端方法实现页面转发：</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line"><span class="comment">//        前端的跳转方式</span></span><br><span class="line">        pageContext.forward(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line"><span class="comment">//        在Servlet中的跳转方式</span></span><br><span class="line"><span class="comment">//      request.getRequestDispatcher(&quot;/index.jsp&quot;).forward(req,resp);</span></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure><p>当在01页面中设置属性 02页面中获取属性 并且01根据下述代码</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageContext.forward(<span class="string">&quot;/ScopeTest02.jsp&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>进行页面转发到02 猜猜会获取到哪些变量？</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>事实上 01设置的属性除了pageContext作用域的变量以外，其它都可以获取</p><p>4、getAttribute和findAttribute的区别</p><p><img src="/images/pasted-57.png" alt="upload successful"><br>get：查找pageContext的作用域，没有就返回null</p><p><img src="/images/pasted-58.png" alt="upload successful"><br>find：查找所有作用域，没有就返回null</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、JSP（JavaServerPages）&lt;/p&gt;
&lt;p&gt;2、任何语言都有自己的语法， JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！&lt;/p&gt;</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Session</title>
    <link href="https://zhihuali.cn/2020/08/23/Session/"/>
    <id>https://zhihuali.cn/2020/08/23/Session/</id>
    <published>2020-08-23T15:32:00.000Z</published>
    <updated>2020-08-23T15:49:52.759Z</updated>
    
    <content type="html"><![CDATA[<p>1、什么是Session</p><ul><li>服务器会给每一个用户（浏览器）创建一个Session对象</li><li>一个Session独占一个浏览器，只要浏览器没有关闭 Session就存在</li><li>无论在浏览器中有多少个窗口都只有一个JSESSIONID（即同一个Session）</li><li>用户登录之后，整个网站都可以被这个用户访问 即保存用户的信息、保存购物车的信息等<a id="more"></a></li></ul><p>2、Session和Cookie的区别</p><ul><li>Cookie是把用户的数据写给用户的浏览器 由浏览器保存（可以保存多个）</li><li>Session是把用户的数据写到用户独占的Session中 服务器端保存（保存重要的信息，减少服务器资源浪费）</li><li>Session对象由服务器创建</li></ul><p>3、使用场景 </p><ul><li>保存一个用户登录的信息 </li><li>购物车信息</li><li>在整个网站中经常会使用的数据保存在Session中</li></ul><p>4、Session的使用</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//    解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//    得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//    给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;华哥&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;华哥&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="comment">//        获取Session的id</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"><span class="comment">//        判断Session是不是新创建的</span></span><br><span class="line">        <span class="keyword">boolean</span> aNew = session.isNew();</span><br><span class="line">        <span class="keyword">if</span>(aNew)&#123;</span><br><span class="line"><span class="comment">//            getWriter().print()底层也是调用了getWriter().write()</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功，id为：&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经在服务器中存在了，id为：&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//       猜想：Session创建的时候做了什么？</span></span><br><span class="line"><span class="comment">//         回答：自动创建了Cookie并赋予了一个JSESSIONID</span></span><br><span class="line"><span class="comment">//        Cookie jsessionid = new Cookie(&quot;JSESSIONID&quot;, sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(jsessionid);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>在另一个Servlet程序中获取Session设置的属性值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br><span class="line">       String name = (String) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       resp.getWriter().write(name);</span><br><span class="line">       User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       System.out.println(user);</span><br></pre></td></tr></table></div></figure><p>移除Session设置的属性值并注销Session（手动）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   HttpSession session = req.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//        手动注销Session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Session已注销&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>在web.xml中设置定时自动注销Session（自动）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间 以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        2分钟后Session自动失效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>图示Session过程</p><p><img src="/images/pasted-53.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、什么是Session&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器会给每一个用户（浏览器）创建一个Session对象&lt;/li&gt;
&lt;li&gt;一个Session独占一个浏览器，只要浏览器没有关闭 Session就存在&lt;/li&gt;
&lt;li&gt;无论在浏览器中有多少个窗口都只有一个JSESSIONID（即同一个Session）&lt;/li&gt;
&lt;li&gt;用户登录之后，整个网站都可以被这个用户访问 即保存用户的信息、保存购物车的信息等</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="https://zhihuali.cn/2020/08/23/Cookie-Session/"/>
    <id>https://zhihuali.cn/2020/08/23/Cookie-Session/</id>
    <published>2020-08-23T10:21:00.000Z</published>
    <updated>2020-08-23T15:44:05.943Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="1、会话"   >          <a href="#1、会话" class="heading-link"><i class="fas fa-link"></i></a>1、会话</h4>      <p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><a id="more"></a><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端 服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol>        <h4 id="2、保存会话的两种技术"   >          <a href="#2、保存会话的两种技术" class="heading-link"><i class="fas fa-link"></i></a>2、保存会话的两种技术</h4>      <p>Cookie</p><ul><li>客户端技术（响应与请求）</li></ul><p>Session</p><ul><li>服务器技术，利用这个技术可以保存用户的会话信息 我们可以把信息或数据放在Session中</li></ul><p>常见场景：一些网站在第二次访问就可以直接自动登录</p><p>//      需求：保存用户上一次访问的时间<br>//      操作：服务器告诉你你来的时间 并将这个时间封装成一个信件 下次再次访问时就知道是你来了</p>        <h4 id="3、Cookie"   >          <a href="#3、Cookie" class="heading-link"><i class="fas fa-link"></i></a>3、Cookie</h4>      <p>1.从请求中拿到Cookie信息</p><p>2.服务器响应给客户端Cookie</p><p><strong>有关Cookie的方法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();    <span class="comment">//获得Cookie</span></span><br><span class="line"></span><br><span class="line">cookie.getName();        <span class="comment">//获得Cookie中的Key</span></span><br><span class="line">    </span><br><span class="line">cookie.getValue();        <span class="comment">//获得Cookie的Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);        <span class="comment">//新建一个Cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);        <span class="comment">//设置Cookie的有效期</span></span><br><span class="line"></span><br><span class="line"> resp.addCookie(cookie);        <span class="comment">//响应给客户端一个Cookie</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>CookieServlet类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cookie01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//      需求：保存用户上一次访问的时间</span></span><br><span class="line"><span class="comment">//      操作：服务器告诉你你来的时间 并将这个时间封装成一个信件 下次再次访问时就知道是你来了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.解决中文乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.获取输出给客户端输出流</span></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;访问本站&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.Cookie 服务器端从客户端获取 获取的是数组 说明Cookie可能存在多个</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.判断Cookies是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//           如果存在怎么办? 看是不是有与设置的变量名相同的cookie名</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cookies.length;i++)&#123;</span><br><span class="line">                Cookie cookie = cookies[i];</span><br><span class="line"><span class="comment">//                获取cookie的名字</span></span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;time&quot;</span>))&#123;</span><br><span class="line"><span class="comment">//                    获取cookie中的值</span></span><br><span class="line">                    <span class="keyword">long</span> time = Long.parseLong(cookie.getValue());</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date(time);</span><br><span class="line">                    String realTime = date.toLocaleString();</span><br><span class="line">                    out.write(<span class="string">&quot;你上次访问的时间是&quot;</span>+realTime);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            如果没有cookie 就返回第一次访问本站信息并为客户端传一个cookie</span></span><br><span class="line">            out.write(<span class="string">&quot;第一次访问本站&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        若cookies为空,则响应给客户端一个cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//        为cookie设置一天的有效期</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">//        删除cookie 将有效期设置为0即为删除</span></span><br><span class="line"><span class="comment">//        cookie.setMaxAge(0);</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第一次访问网站：</p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p>刷新后：</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p>响应中 Cookie设置本次访问网站的时间<br><img src="/images/pasted-45.png" alt="upload successful"></p><p>请求中 上一次登录的时间<br><img src="/images/pasted-46.png" alt="upload successful"></p><p>设置了有效期后的Cookie</p><p><img src="/images/pasted-48.png" alt="upload successful"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>        <h4 id="4、Tips："   >          <a href="#4、Tips：" class="heading-link"><i class="fas fa-link"></i></a>4、Tips：</h4>      <p>1、<strong>一般会保存到本地的用户目录下的 AppData下</strong></p><p>2、一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><p>3、删除Cookie</p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul>        <h4 id="5、为了避免中文乱码问题-需要转码："   >          <a href="#5、为了避免中文乱码问题-需要转码：" class="heading-link"><i class="fas fa-link"></i></a>5、为了避免中文乱码问题 需要转码：</h4>      <p>设置编码：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(&quot;托尼&quot;,&quot;utf-8&quot;)</span><br></pre></td></tr></table></div></figure><p>解码：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLDecoder.decode(cookie.getValue(),&quot;UTF-8&quot;)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、会话&quot;   &gt;
          &lt;a href=&quot;#1、会话&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;1、会话&lt;/h4&gt;
      &lt;p&gt;&lt;strong&gt;会话&lt;/strong&gt;：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有状态会话&lt;/strong&gt;：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；&lt;/p&gt;</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【面试-02】请求转发与重定向</title>
    <link href="https://zhihuali.cn/2020/08/23/%E3%80%90%E9%9D%A2%E8%AF%95-02%E3%80%91%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://zhihuali.cn/2020/08/23/%E3%80%90%E9%9D%A2%E8%AF%95-02%E3%80%91%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2020-08-23T06:35:00.000Z</published>
    <updated>2020-08-23T06:35:31.840Z</updated>
    
    <content type="html"><![CDATA[        <h5 id="【面试题】重定向和转发的区别"   >          <a href="#【面试题】重定向和转发的区别" class="heading-link"><i class="fas fa-link"></i></a>**【面试题】重定向和转发的区别 **</h5>      <p>相同点：页面都会实现跳转</p><p>不同点：</p><ul><li>请求转发时 url地址栏不会产生变化；而重定向时 url地址栏会发生变化</li><li>请求转发状态码：302 </li><li>重定向状态码：307</li></ul>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h5 id=&quot;【面试题】重定向和转发的区别&quot;   &gt;
          &lt;a href=&quot;#【面试题】重定向和转发的区别&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;**【面试题】重定向和转发的区</summary>
      
    
    
    
    <category term="面试" scheme="https://zhihuali.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Response &amp;&amp; Request </title>
    <link href="https://zhihuali.cn/2020/08/23/Request-Response/"/>
    <id>https://zhihuali.cn/2020/08/23/Request-Response/</id>
    <published>2020-08-23T02:07:00.000Z</published>
    <updated>2020-08-23T06:43:38.728Z</updated>
    
    <content type="html"><![CDATA[<p>HttpServletRequest与HttpServletResponse</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web服务器接收到客户端的http请求，针对这个请求，</span><br><span class="line">分别创建一个代表请求的HttpServletRequest对象</span><br><span class="line">和代表响应的一个HttpServletResponse</span><br></pre></td></tr></table></div></figure><ul><li><p>如果要获取客户端请求过来的参数：找HttpServletRequest</p></li><li><p>如果要给客户端响应一些信息：找HttpServletResponse</p><a id="more"></a></li></ul>        <h1 id="HttpServletResponse"   >          <a href="#HttpServletResponse" class="heading-link"><i class="fas fa-link"></i></a>HttpServletResponse</h1>      <p><img src="/images/pasted-32.png" alt="upload successful"></p><p><img src="/images/pasted-33.png" alt="upload successful"></p>  <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">    String realPath = <span class="string">&quot;D:\java space_idea\JavaWeb\01-Servlet\target\01-Servlet\WEB-INF\classes\1.jpg&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class="line">    <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>  3.获取验证码</p>  <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        设置浏览器3秒自动刷新</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//        在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"><span class="comment">//        得到图片</span></span><br><span class="line">        Graphics2D graphics = (Graphics2D) image.getGraphics();     <span class="comment">//将这个类想象成笔</span></span><br><span class="line"><span class="comment">//        设置图片背景颜色</span></span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        给图片写数据</span></span><br><span class="line">        graphics.setColor(Color.red);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        graphics.drawString(getRandom(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        告诉浏览器 这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="comment">//        用文本方式打开的话 resp.setContentType(&quot;text/html&quot;);</span></span><br><span class="line"><span class="comment">//        网站存在缓存 禁止浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;cache-control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"><span class="comment">//        把图片显示给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机5位数字</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//        将数字转换为字符串</span></span><br><span class="line">        String num = random.nextInt(<span class="number">99999</span>)+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>-num.length();i++)&#123;</span><br><span class="line"><span class="comment">//            避免生成低于5位数字的数 没有的数位用0填充</span></span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>image<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>indi.zhihuali.ImageServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>image<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/img<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>4.请求重定向</p><p><img src="/images/pasted-34.png" alt="upload successful"><br>一个web资源B受到客户端A的请求后 B会通知客户端A去访问另外一个web资源C，这个过程叫重定向</p><p>常见的应用场景就是用户登录跳转到页面</p><ul><li><p>测试</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        重定向原理：</span><br><span class="line">        resp.setHeader(&quot;Location&quot;, &quot;&#x2F;s&#x2F;hello2&quot;);</span><br><span class="line">        resp.setStatus(302);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        resp.sendRedirect(&quot;&#x2F;s&#x2F;hello2&quot;);     &#x2F;&#x2F;重定向</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure></li></ul><p><img src="/images/pasted-35.png" alt="upload successful"><br><strong>访问/red的时候会自动跳转到/s/hello2</strong></p>        <h5 id="【面试题】重定向和转发的区别"   >          <a href="#【面试题】重定向和转发的区别" class="heading-link"><i class="fas fa-link"></i></a>**【面试题】重定向和转发的区别 **</h5>      <p>相同点：页面都会实现跳转</p><p>不同点：</p><ul><li>请求转发时 url地址栏不会产生变化；而重定向时 url地址栏会发生变化</li><li>请求转发状态码：302 </li><li>重定向状态码：307</li></ul>        <h1 id="HttpServletRequest"   >          <a href="#HttpServletRequest" class="heading-link"><i class="fas fa-link"></i></a>HttpServletRequest</h1>      <p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器, HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法,获得客户端的所有信息：</p><p><img src="/images/pasted-41.png" alt="upload successful"></p><p><img src="/images/pasted-42.png" alt="upload successful"></p><p>应用：获取前端传递的参数 请求转发</p><ul><li>在index.xml中设置html页面</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--这里提交的路径需要寻找到项目的路径</span>/<span class="attr">web</span>项目的根路径<span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--使用post请求--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    hobbies:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;movies&quot;</span>&gt;</span>movies</span><br><span class="line">    hobbies:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;food&quot;</span>&gt;</span>food</span><br><span class="line">    hobbies:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;play&quot;</span>&gt;</span>play</span><br><span class="line">    hobbies:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span>&gt;</span>code</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>新建一个Servlet程序并获取客户端输入的表单数据 并进行登陆成功重定向并注册</li></ul>  <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;进入请求&quot;);</span></span><br><span class="line"><span class="comment">//          设置请求与响应的字符集</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        处理请求</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span>+username +<span class="string">&quot;  password = &quot;</span>+password);</span><br><span class="line"><span class="comment">//        后台接受 中文乱码问题：需要给req也设置utf-8 在第一句</span></span><br><span class="line">        <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">            System.out.println(hobby);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        重定向时一定注意路径问题</span></span><br><span class="line"><span class="comment">//        在相对路径前必须要加一个req.getContextPath()</span></span><br><span class="line"><span class="comment">//        resp.sendRedirect(req.getContextPath()+&quot;/success.jsp&quot;);</span></span><br><span class="line"><span class="comment">//        请求转发 req.getContextPath()获取当前web项目路径 但Dispatcher本身已经是相对路径了 就不需要写了</span></span><br><span class="line"><span class="comment">//        这里的&quot;/&quot;代表当前的web应用</span></span><br><span class="line"><span class="comment">//        加上会报错 错误信息为无法找到 /s/s/success.jsp 因为本身已经定位到/s了</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher(req.getContextPath() + &quot;/success.jsp&quot;).forward(req,resp);</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>启用Tomcat服务器后 输入任意用户名和密码</li></ul><p><img src="/images/pasted-36.png" alt="upload successful"></p><ul><li>在控制台会显示客户端输入的用户名及密码并进行相应的页面重定向操作</li></ul><p><img src="/images/pasted-43.png" alt="upload successful"></p><p><img src="/images/pasted-44.png" alt="upload successful"></p>        <h5 id="【面试题】重定向和转发的区别-1"   >          <a href="#【面试题】重定向和转发的区别-1" class="heading-link"><i class="fas fa-link"></i></a>**【面试题】重定向和转发的区别 **</h5>      <p>相同点：页面都会实现跳转</p><p>不同点：</p><ul><li>请求转发时 url地址栏不会产生变化；而重定向时 url地址栏会发生变化</li><li>请求转发状态码：302 </li><li>重定向状态码：307</li></ul>        <h5 id="自我小结："   >          <a href="#自我小结：" class="heading-link"><i class="fas fa-link"></i></a>自我小结：</h5>      <p>** HttpServletRequest：**</p><ul><li>获取前端前端参数 </li><li>请求转发</li></ul><p>** HttpServletResponse：**</p><ul><li>设置响应头信息；addHeader(“reFresh”, “5;URL=xxxx”);</li><li>发送状态码；sendError(404);</li><li>设置响应正文；getWriter().print(“fdsfdsa”);</li><li>重定向：sendRedirect(“path”);</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;HttpServletRequest与HttpServletResponse&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;web服务器接收到客户端的http请求，针对这个请求，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分别创建一个代表请求的HttpServletRequest对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;和代表响应的一个HttpServletResponse&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果要获取客户端请求过来的参数：找HttpServletRequest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要给客户端响应一些信息：找HttpServletResponse&lt;/p&gt;</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ServletContext</title>
    <link href="https://zhihuali.cn/2020/08/22/Servlet%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://zhihuali.cn/2020/08/22/Servlet%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-08-22T08:36:00.000Z</published>
    <updated>2020-08-22T14:39:04.182Z</updated>
    
    <content type="html"><![CDATA[<p>web容器在启动的时候 会为每个web程序都创建一个对应的ServletContext对象，代表了当前的web应用</p><p>ServletContext对象的作用：</p><a id="more"></a><p><strong>1、共享数据</strong></p><p>在一个Servlet中保存的数据 可以在另一个Servlet中拿到</p><p>在下面的HelloServlet2设置ServletContext的属性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        this.getInitParameter();  初始化参数</span></span><br><span class="line"><span class="comment">//        this.getServletConfig();    Servlet配置</span></span><br><span class="line"><span class="comment">//        this.getServletContext();   Servlet上下文</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = <span class="string">&quot;tony&quot;</span>;</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;username&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在HelloServlet中获取ServletContext的属性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;进入了doGet方法&quot;);</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();  <span class="comment">//响应流</span></span><br><span class="line"><span class="comment">//        writer.println(&quot;Hello world&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        测试ServletContext的作用域：</span></span><br><span class="line"><span class="comment">//        HelloServlet2中setAttribute而在HelloServlet中getAttribute</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        writer.println(servletContext.getAttribute(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>并在web.xml中注册两个Servlet</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>indi.zhihuali.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>indi.zhihuali.HelloServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>2、获取初始化参数</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在对应的Servlet程序中可以通过下面的语句获取该初始化参数并执行相应操作</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url = servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">resp.getWriter().println(url);</span><br></pre></td></tr></table></div></figure><p><strong>3、请求转发（RequestDipatcher）</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        javax.servlet.ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;this is s2&quot;</span>);</span><br><span class="line">        servletContext.getRequestDispatcher(<span class="string">&quot;/s1&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>在/s1对应的Servlet程序中向页面写入”this is s1” 启动Tomcat服务器后 进入/s2路径显示的是s1的输出内容 这就是请求的转发</p><p><strong>转发与重定向</strong></p><p><img src="/images/pasted-28.png" alt="upload successful"></p><p>4、读取资源文件</p><p><strong>类路径（classpath）： java和resource都在classpath目录下</strong></p><ul><li><p>在java目录下新建properties</p></li><li><p>在resources目录下新建properties</p><p>发现都被打包到了同一个路径下 classes 俗称为classpath</p></li></ul><p><img src="/images/pasted-29.png" alt="upload successful">(C:\Users\zhihua.Li\AppData\Roaming\Typora\typora-user-images\image-20200822193856284.png)</p><p>若将xml或properties放在src/main/java路径下 可能在运行后target里没有，所以需要在pom.xml中添加</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>在读取资源文件时需要准备一个properties文件来存放数据 通过一个文件流去读取并执行操作</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">       ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">       InputStream inputStream = servletContext.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">       <span class="comment">//路径对应的是target下的路径，见下图</span></span><br><span class="line">       Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">       properties.load(inputStream);</span><br><span class="line">       String username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       resp.getWriter().println(username);</span><br><span class="line">       resp.getWriter().println(password);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="/images/pasted-30.png" alt="upload successful"></p><p>执行测试运行即可</p><p><img src="/images/pasted-31.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;web容器在启动的时候 会为每个web程序都创建一个对应的ServletContext对象，代表了当前的web应用&lt;/p&gt;
&lt;p&gt;ServletContext对象的作用：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【已解决】Hexo导航栏添加新分栏问题</title>
    <link href="https://zhihuali.cn/2020/08/22/%E3%80%90%E5%B7%B2%E8%A7%A3%E5%86%B3%E3%80%91Hexo%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%88%86%E6%A0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://zhihuali.cn/2020/08/22/%E3%80%90%E5%B7%B2%E8%A7%A3%E5%86%B3%E3%80%91Hexo%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%88%86%E6%A0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-21T17:20:00.000Z</published>
    <updated>2020-08-22T02:58:21.676Z</updated>
    
    <content type="html"><![CDATA[<p>关于上方这些分栏的添加 主题中默认只开启主页和时间轴<br><img src="/images/pasted-20.png" alt="upload successful"></p><a id="more"></a><p>如果想开启新的分栏 首先需要在博客项目的根目录下的_config.yml处修改</p><p><img src="/images/pasted-23.png" alt="upload successful"></p><p>将注解取消后 需要在根目录下打开 git bash<br>并输入hexo new page tags （直接输入要添加分栏后对应的路径文件夹）</p><p>该命令会自动在下图路径中生成新的文件夹</p><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>在index.md中添加</p><p><img src="/images/pasted-25.png" alt="upload successful"></p><p>即可实现新分栏的添加并可以正常使用</p><p><img src="/images/pasted-27.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于上方这些分栏的添加 主题中默认只开启主页和时间轴&lt;br&gt;&lt;img src=&quot;/images/pasted-20.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的使用</title>
    <link href="https://zhihuali.cn/2020/08/22/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhihuali.cn/2020/08/22/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-21T16:13:00.000Z</published>
    <updated>2020-08-22T02:23:08.455Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些我学到hexo命令</p><a id="more"></a>        <h2 id="Hexo学到的东西"   >          <a href="#Hexo学到的东西" class="heading-link"><i class="fas fa-link"></i></a>Hexo学到的东西</h2>              <h3 id="hexo命令1-本地部署"   >          <a href="#hexo命令1-本地部署" class="heading-link"><i class="fas fa-link"></i></a>hexo命令1-本地部署</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; <span class="comment">#init是初始化一个hexo文件夹</span></span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;  <span class="comment">#注意一定要打开文件夹才能进行部署</span></span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install    <span class="comment">#部署之前进行安装</span></span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g   <span class="comment">#生成静态网页</span></span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s      <span class="comment">#启动服务器 启动之后会默认给一个网址进去就是我们部署的网页了</span></span><br></pre></td></tr></table></div></figure>        <h3 id="更换hexo主题"   >          <a href="#更换hexo主题" class="heading-link"><i class="fas fa-link"></i></a>更换hexo主题</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 把你想更换的主题放在themes目录下。官网有很多好看的主题：https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line"> 然后修改站点目录下的_config.yml配置文件找到themes: landscape(默认主题)</span><br><span class="line"></span><br><span class="line">修改成你在themes下放好的主题，就完成了</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些我学到hexo命令&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="https://zhihuali.cn/2020/08/21/Servlet%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhihuali.cn/2020/08/21/Servlet%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-21T07:34:00.000Z</published>
    <updated>2020-08-23T06:47:53.473Z</updated>
    
    <content type="html"><![CDATA[<p>1、Servlet是开发动态web的一门技术<br>2、Sun提供了一个名为Servlet的接口 若想开发Servlet程序只需要完成两个小步骤：</p><ul><li>编写一个类，实现Servlet接口</li><li>将开发好的java类部署到web服务器中</li></ul><p>综上所述 将<strong>实现了Servlet接口的java程序 称为Servlet</strong></p><a id="more"></a><p>3、Servlet程序的书写步骤：</p><ol><li>构建一个普通的maven项目，删除里面的src目录，这个空的工程就是Maven主工程 在学习过程中可以再新建多个子项目 此时就可以使用模板来构建子工程</li></ol><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>2.Maven中子项目可以使用父项目中的依赖</p><p>3.Maven环境优化<br>     1.将xml中的web.xml处内容改为</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>​    2.为模板构建的web子工程中添加java和resource文件夹</p><p>​    3.生成一个Servlet类</p><ol><li><ol><li>编写一个普通类</li><li>实现Servlet接口 （<strong>Sun API 提供了两个实现了Servlet接口的实现类：HttpServlet和GenericServlet 而我们在写自己的Servlet类时 只需要继承即可</strong>）</li><li>添加Servlet映射/在web.xml中注册</li><li>配置Tomcat</li></ol></li></ol><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>​          5.启动测试       </p><p>4、Servlet原理</p><p>由Web服务器调用 Web服务器会在收到浏览器请求后进行如下步骤：<br><img src="/images/pasted-13.png" alt="upload successful"></p><p>5、Mapping问题</p><ul><li>一个Servlet可以指定一个映射路径</li></ul><p><img src="/images/pasted-14.png" alt="upload successful"></p><ul><li>一个Servlet可以指定多个映射路径</li></ul><p><img src="/images/pasted-15.png" alt="upload successful"></p><ul><li>一个Servlet可以指定通用映射路径</li></ul><p><img src="/images/pasted-16.png" alt="upload successful"></p><ul><li>默认请求路径（注意如果路径为 /* 则默认不会进入项目的index页）</li></ul><p><img src="/images/pasted-17.png" alt="upload successful"></p><ul><li>指定后缀或前缀</li></ul><p><img src="/images/pasted-19.png" alt="upload successful"></p><ul><li><p>扩展<br>优先级问题：<br>  指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p><p>  解释：<br>  如果一个Servlet映射为/* 而另一个映射为/hello 则运行程序后首先进入的是/<em>的页面 输入路径 /hello 后 (固有思想是/hello也属于 /</em> ) 是会进入到/hello映射对应的Servlet程序中的，而不是在原来的/*的页面上<br>  也就是：精确 &gt; 全局</p><p>6.doPost()与 doGet()</p></li></ul><p>见CSDN：<br><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_38963960/article/details/79468182" >https://blog.csdn.net/qq_38963960/article/details/79468182</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Servlet是开发动态web的一门技术&lt;br&gt;2、Sun提供了一个名为Servlet的接口 若想开发Servlet程序只需要完成两个小步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个类，实现Servlet接口&lt;/li&gt;
&lt;li&gt;将开发好的java类部署到web服务器中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上所述 将&lt;strong&gt;实现了Servlet接口的java程序 称为Servlet&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="JavaWeb" scheme="https://zhihuali.cn/categories/JavaWeb/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【已解决】关于admin插入图片后裂图情况</title>
    <link href="https://zhihuali.cn/2020/08/21/%E3%80%90%E5%B7%B2%E8%A7%A3%E5%86%B3%E3%80%91%E5%85%B3%E4%BA%8Eadmin%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%90%8E%E8%A3%82%E5%9B%BE%E6%83%85%E5%86%B5/"/>
    <id>https://zhihuali.cn/2020/08/21/%E3%80%90%E5%B7%B2%E8%A7%A3%E5%86%B3%E3%80%91%E5%85%B3%E4%BA%8Eadmin%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%90%8E%E8%A3%82%E5%9B%BE%E6%83%85%E5%86%B5/</id>
    <published>2020-08-21T05:32:00.000Z</published>
    <updated>2020-08-22T03:08:40.715Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 【已解决】关于admin插入图片后裂图情况<br>author: Zhihua Li<br>date: 2020-08-21 09:45:11</p><p>在使用插件Hexo-admin插入图片时，会发现这样的情况</p><p><img src="/images/pasted-2.png" alt="upload successful"><br>而右侧框中则会显示且并不会出现具体的图片</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>其实是配置文件中路径的书写格式出错导致图片的路径出错因此无法上传正确的图片</p><a id="more"></a><p><img src="/images/pasted-6.png" alt="upload successful"></p><p>解决方法：</p><p>1.<br><img src="/images/pasted-7.png" alt="upload successful"></p><p>2.</p><p>双击进入 并打开api.js文件</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>3.将图中红框位置处代码修改为</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>重新刷新一下界面即可</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: 【已解决】关于admin插入图片后裂图情况&lt;br&gt;author: Zhihua Li&lt;br&gt;date: 2020-08-21 09:45:11&lt;/p&gt;
&lt;p&gt;在使用插件Hexo-admin插入图片时，会发现这样的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-2.png&quot; alt=&quot;upload successful&quot;&gt;&lt;br&gt;而右侧框中则会显示且并不会出现具体的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-4.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实是配置文件中路径的书写格式出错导致图片的路径出错因此无法上传正确的图片&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【已解决】关于个人网站404问题</title>
    <link href="https://zhihuali.cn/2020/08/20/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99404%E9%97%AE%E9%A2%98/"/>
    <id>https://zhihuali.cn/2020/08/20/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99404%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-20T11:33:00.000Z</published>
    <updated>2020-08-22T03:05:53.990Z</updated>
    
    <content type="html"><![CDATA[<p>在绑定域名后<br>1、<br>需要将_config.yml中的<br><img src="/images/pasted-1.png" alt="upload successful"><br>url 改成自己的域名</p><a id="more"></a><p>2、需要在github中的setting修改配置</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>改动上述两个位置 404成功解决</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在绑定域名后&lt;br&gt;1、&lt;br&gt;需要将_config.yml中的&lt;br&gt;&lt;img src=&quot;/images/pasted-1.png&quot; alt=&quot;upload successful&quot;&gt;&lt;br&gt;url 改成自己的域名&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhihuali.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[面试-01]网站是如何被访问的</title>
    <link href="https://zhihuali.cn/2020/08/20/%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84/"/>
    <id>https://zhihuali.cn/2020/08/20/%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84/</id>
    <published>2020-08-20T10:10:00.000Z</published>
    <updated>2020-08-22T03:04:20.003Z</updated>
    
    <content type="html"><![CDATA[<p>当在浏览器中输入一个域名并回车时：<br>会自动查找本机的 C:\Windows\System32\drivers\etc\hosts 配置文件中去寻找有没有输入的域名映射 如果有则直接返回对应的ip地址</p><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>若没有就去DNS服务器中寻找该域名对应的ip地址 找到就返回 找不到就返回找不到报错</p><p>1个ip可以对应多个域名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当在浏览器中输入一个域名并回车时：&lt;br&gt;会自动查找本机的 C:\Windows\System32\drivers\etc\hosts 配置文件中去寻找有没有输入的域名映射 如果有则直接返回对应的ip地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-0.</summary>
      
    
    
    
    <category term="面试" scheme="https://zhihuali.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="Java" scheme="https://zhihuali.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyFirstBlog</title>
    <link href="https://zhihuali.cn/2020/08/19/HelloMyBlog/"/>
    <id>https://zhihuali.cn/2020/08/19/HelloMyBlog/</id>
    <published>2020-08-19T12:38:00.000Z</published>
    <updated>2020-08-21T16:58:59.073Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="this-is-my-first-blog-and-I-will-try-my-best-to-show-you-something-best"   >          <a href="#this-is-my-first-blog-and-I-will-try-my-best-to-show-you-something-best" class="heading-link"><i class="fas fa-link"></i></a>this is my first blog and I will try my best to show you something best.</h1>      <p><img src="/images/pasted-3.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;this-is-my-first-blog-and-I-will-try-my-best-to-show-you-something-best&quot;   &gt;
          &lt;a href=&quot;#this-is-my-first-blog-and-</summary>
      
    
    
    
    
  </entry>
  
</feed>
